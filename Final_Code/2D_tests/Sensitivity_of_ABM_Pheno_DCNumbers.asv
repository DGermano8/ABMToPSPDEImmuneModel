clc;
% close all;
clear all;

purple_colour = 1/255*[131, 96, 150];
red_colour = 1/255*[237, 123, 123];
yellow_colour = 1/255*[240, 184, 110];
blue_colour = 1/255*[106 123 237];
green_colour = 1/255*[77 150 138];
back_colour = 1/255*[56 56 56];


%%

ModelParams = struct();

domainBoundary = struct();
domainBoundary.x_max =  100;
domainBoundary.y_max =  10;
domainBoundary.x_min =  0;
domainBoundary.y_min =  0;

ModelParams.T_final = 900;
% ModelParams.T_final = 1;
ModelParams.p_move = 0.5;

% ChemoTaxis params
ModelParams.C_sens = 1;             % Taxis sensitivity coefficient
ModelParams.C_scaling = 0.001;

% DCs
ModelParams.NumDCs = 16;
ModelParams.R_DC = 1.00;
ModelParams.numberOfClusters = 1;

dx = 0.5;
dy = dx;
dt = 0.1;
da = 1;

% T-cells
ModelParams.P_A = 0.5; % Antigen gain rate
ModelParams.P_D = 0.1;  % Antigen loss rate
ModelParams.activatedAge  = 16;

ModelParams.dx_ABM = dx;
ModelParams.dy_ABM = dy;
ModelParams.dt_ABM = dt;            % Time step
ModelParams.da_ABM = da;            % Time step
ModelParams.NumbAgents = 5000;

ModelParams.dx_PDE = dx;
ModelParams.dy_PDE = dy;
ModelParams.dt_PDE = dt;
ModelParams.da_PDE = da;

ModelParams.plot_traj = true;
recordRate = 800;
ModelParams.t_plot = recordRate/ModelParams.dt_ABM;



poolobj = gcp("nocreate"); % If no pool, do not create new one.
if isempty(poolobj)
    parpool(6);
end

iter = 0;
tic;

NumberOfRepeats = 24;
NumberOfCluster = [1 2 4 8 16];
% PA = [1 2 5];
PA = [0.1 0.5 0.9];


ABM_Activation = zeros(length(PA), length(NumberOfCluster),NumberOfRepeats);
PDE_Activation = zeros(length(PA), length(NumberOfCluster),NumberOfRepeats);

NumberDCsToActivate = zeros(length(PA), length(NumberOfCluster),NumberOfRepeats,ModelParams.NumDCs);

for pa = 1:length(PA)

    ModelParams.P_A = PA(pa);

    for NC = 1:length(NumberOfCluster);

        ModelParams.numberOfClusters = NumberOfCluster(NC);
    
        parfor num_rep = 1:NumberOfRepeats;
    
            rndSeed = num_rep;
        
            % [u, ~, dCdx, dCdy, Ic, A_Ic, Inds_Ic_st, params, A] = Phenotype_PDE_SetUp(rndSeed,domainBoundary,ModelParams);
            % activatedCells_PDE = zeros(params.nt,1);
        
            [walker_positions, walker_activation, C, DCLingerTime, DC_model, params_ABM] = Discrete_SetUp(rndSeed,domainBoundary,ModelParams);    
            activatedCells_ABM = zeros(params_ABM.nt,1);
    
            % x = linspace(0, params.Lx, params.Nx);
            % y = linspace(0, params.Ly, params.Ny);
            % a = linspace(0, params.La, params.Na);

            for n=0:params_ABM.nt
                % u = computePhenotypeModel(u, dCdx, dCdy, A, Inds_Ic_st, A_Ic, params);
                % activatedCells_PDE(n+1) = squeeze(sum(u,[1,2]))'*a'/params.activatedAge;
                
                [walker_positions, walker_activation, C, DCLingerTime] = computeABMModel_Vectorized(walker_positions, walker_activation, C, DCLingerTime, DC_model, params_ABM);
                activatedCells_ABM(n+1) = sum(walker_activation(:))/(params_ABM.activatedAge*params_ABM.num_walkers);
            end
            
            ABM_Activation(pa,NC,num_rep) = activatedCells_ABM(end);
            % PDE_Activation(pa,NC,num_rep) = activatedCells_PDE(end);
    
    
            % track number of DCs to activate these T cells for the ABM
            NumberDCsToActivate_tmp = zeros(ModelParams.NumDCs,1);
            for ii=1:size(DCLingerTime,1)
                if walker_activation(ii) == ModelParams.activatedAge
                    ii_NumberDCsToActivate = nnz(DCLingerTime(ii,:));
                    if ii_NumberDCsToActivate > 0
                        NumberDCsToActivate_tmp(ii_NumberDCsToActivate) = NumberDCsToActivate_tmp(ii_NumberDCsToActivate) + 1;
                    end
                end
            end
            NumberDCsToActivate(pa,NC,num_rep,:) = NumberDCsToActivate_tmp(:)/ModelParams.NumbAgents;
            
    
        end
    
    
        iter = iter + NumberOfRepeats;
        prog = (iter)/(length(PA)*length(NumberOfCluster)*NumberOfRepeats);
        elapsedTime = toc;
        estimatedTotalTime = elapsedTime / prog;
        remainingTime = (estimatedTotalTime - elapsedTime)/60;
    
        % disp(sprintf('\rProgress: %1.2f%%, Estimated time remaining: %1.2f minutes', 100*prog,  remainingTime))
        clc;
        fprintf('Progress: %1.2f%%, Estimated time remaining: %1.2f minutes', 100*prog,  remainingTime);
        fprintf('\n');
    
    end
end

disp('\n');
toc;

%%


C_levels = [0:0.1:1];

cmap = myColour3Gradient(length(C_levels)+1, yellow_colour, red_colour, purple_colour);

figure;

subplot(1,3,1)
hold on;
plot(mean(reshape(ABM_Activation(1,:,:) , [length(NumberOfCluster),NumberOfRepeats])'),'.','MarkerSize',10)
% plot(mean(reshape(PDE_Activation(1,:,:) , [length(NumberOfCluster),NumberOfRepeats])'),'.','MarkerSize',10)
hold off;
axis([0 6 0 1])

subplot(1,3,2)
hold on;
plot(mean(reshape(ABM_Activation(2,:,:) , [length(NumberOfCluster),NumberOfRepeats])'),'.','MarkerSize',10)
% plot(mean(reshape(PDE_Activation(2,:,:) , [length(NumberOfCluster),NumberOfRepeats])'),'.','MarkerSize',10)
hold off;
axis([0 6 0 1])


subplot(1,3,3)
hold on;
plot(mean(reshape(ABM_Activation(3,:,:) , [length(NumberOfCluster),NumberOfRepeats])'),'.','MarkerSize',10)
% plot(mean(reshape(PDE_Activation(3,:,:) , [length(NumberOfCluster),NumberOfRepeats])'),'.','MarkerSize',10)
hold off;
axis([0 6 0 1])




%%
f = gcf;
f.Color = [1 1 1];
% f.Position = [1728 381 1215 250];
% % export_fig 2D_SingleDC.png -m2.5
% 
    

%%


tmp = reshape(sum(NumberDCsToActivate,3)/NumberOfRepeats, [length(PA), length(NumberOfCluster),ModelParams.NumDCs]);

iter = 0;
figure;
for ii=1:length(PA)
    t1 = reshape(tmp(ii,:,:), [length(NumberOfCluster),ModelParams.NumDCs] );
    
    for jj=1:length(NumberOfCluster)
        iter = iter + 1;
        subplot(length(PA), length(NumberOfCluster), iter)
        
        t2 = t1(jj,:);

        bar(1:ModelParams.NumDCs,t2)

        title(['P_A = ', num2str(PA(ii)), ', N_C = ', num2str(NumberOfCluster(jj))])
    end
end
sgtitle(['P_D = ', num2str(ModelParams.P_D)])











